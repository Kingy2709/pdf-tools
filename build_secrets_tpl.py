import json, os, subprocess, sys, pathlib

# Configure
VAULT = os.environ.get("OP_AUT_VAULT")  # vault UUID (preferred) or name
FIELD = "credential"
OUT = os.path.expanduser("~/.secrets.env.tpl")
BACKUP = OUT + ".bak"

# Env var -> item title (keep titles exactly as currently used; adjust if your titles differ)
MAPPING = {
    "OPENAI_API_KEY": "openai.api-key.raycast.personal",
    "N_TOKEN_RAYCAST": "notion.api-token.raycast.personal",
    "N_TOKEN_365": "notion.api-token.ms365.personal",
    "N_TOKEN_RESEARCHER": "notion.api-token.researcher.personal",
    "TRELLO_API_KEY": "trello.api-key.raycast.personal",
    "TRELLO_TOKEN": "trello.api-token.raycast.personal",
    "CLINIKO_API_KEY_RAYCAST": "cliniko.api-token.raycast.personal",
    "CLINIKO_API_KEY_HEIDI": "cliniko.api-token.heidi.personal",
    "CLINIKO_API_KEY_PHYSITRACK": "cliniko.api-token.physitrack.personal",
    "PHYSITRACK_API_KEY": "physitrack.api-token.raycast.personal",
}

def run_json(cmd):
    p = subprocess.run(cmd, capture_output=True, text=True)
    if p.returncode != 0:
        print(p.stderr.strip(), file=sys.stderr)
        sys.exit(p.returncode)
    return json.loads(p.stdout)

def main():
    if not VAULT:
        print("Set OP_AUT_VAULT to your Automation vault UUID or name.")
        sys.exit(2)

    # Build title -> item-id map for the target vault
    items = run_json(["op", "item", "list", "--vault", VAULT, "--format", "json"])
    title_to_id = {}
    for it in items:
        title = it.get("title")
        iid = it.get("id") or it.get("uuid")
        if title and iid:
            title_to_id[title] = iid

    missing = [ (env, title) for env, title in MAPPING.items() if title not in title_to_id ]
    if missing:
        print("The following titles were not found in the vault:", file=sys.stderr)
        for env, title in missing:
            print(f"  - {env}: {title}", file=sys.stderr)
        print("\nFix titles or move items into this vault, then rerun.", file=sys.stderr)
        # Continue for found ones, but warn
    lines = []
    for env, title in MAPPING.items():
        iid = title_to_id.get(title)
        if not iid:
            continue
        ref = f'{{{{ op://{VAULT}/{iid}/{FIELD} }}}}'
        lines.append(f'export {env}="{ref}"')

    content = "# Generated by build_secrets_tpl.py (UUID-based 1Password references)\n" + "\n".join(lines) + "\n"
    # Backup existing
    if os.path.exists(OUT):
        pathlib.Path(BACKUP).write_text(pathlib.Path(OUT).read_text())
        print(f"Backed up existing template to: {BACKUP}")
    pathlib.Path(OUT).write_text(content)
    print(f"Wrote {OUT}")
    if missing:
        sys.exit(1)
    print("All mappings resolved. Open a new shell and verify env vars are set.")

if __name__ == "__main__":
    main()
